name: CI 

on: 
  [ push, workflow_dispatch ]

permissions:
  contents: read
  packages: read
      
jobs:
  build:
    
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        version: [ 12.8.7 ]
    
    steps:

      - name: Checkout repository
        uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29  # v4.1.6
        with:
          path: src

      - name: Get OpenEdge version
        id: get-oeversion
        uses: bfv/openedge-flatversion@49ecdca1670447fcf715c0b505607ec17dc59b62  # v1.2.1
        with:
          version: ${{matrix.version}}

      - name: Version to env
        run: |
          echo "FLATVERSION=${{ steps.get-oeversion.outputs.flat-version }}" >> $GITHUB_ENV
          echo "OPENEDGE_VERSION=${{matrix.version}}" >> $GITHUB_ENV
          echo "OPENEDGE_BASE_VERSION=${{ steps.get-oeversion.outputs.base-version }}" >> $GITHUB_ENV

      - name: Insert JDK version in Dockerfile
        run: |
          jdk=`jq -r ".jdk${{env.FLATVERSION}}" src/jdk-versions.json`
          echo JDK: $jdk
          sed -i "s/JDKVERSION/$jdk/g" src/Dockerfile
          echo download jdk from Dockerfile:
          cat src/Dockerfile | grep temurin
  
      - name: Download installer files
        run: |
          src/scripts/download-openedge.sh
      
      - name: Get response.ini  # get progress.cfg from secret PROGRESS_CFG_122
        run: |
          echo fetching response.ini/progress.cfg from secret RESPONSE_INI_${{env.FLATVERSION}}
          echo "${{ secrets[format('RESPONSE_INI_{0}', env.FLATVERSION)] }}" > src/response.ini
          echo "${{ secrets[format('PROGRESS_CFG_{0}', env.FLATVERSION)] }}" | base64 --decode > src/progress.cfg
          ls -l src

      - name: Prepare Dockerfile-dotnet
        run: |
          oever=$OPENEDGE_VERSION
          sed -i "s/OPENEDGEVERSION/$oever/g" src/Dockerfile-dotnet
          cat src/Dockerfile-dotnet
  
      - name: Build plain docker image
        run: |
          cd src
          docker build -t openedge-compiler:${{env.OPENEDGE_VERSION}} .
      
      - name: Build dotnet docker image
        run: |
          cd src
          docker build -t openedge-compiler:${{env.OPENEDGE_VERSION}}-dotnet8 -f Dockerfile-dotnet .

      - name: Remove installer files
        run: |
          cd src
          rm -f PROGRESS_*
          rm response.ini
          ls -l 
      
      - name: Execute test build
        run: |
          ls -l 
          mkdir artifacts
          chmod ugo=rwx -R ${PWD}/artifacts 
          chmod u=rwx,og=rx -R ${PWD}/src   # don't write to src!
          docker run \
            -v ${PWD}/src/src:/app/src \
            -v ${PWD}/artifacts:/artifacts \
            -v ${PWD}/src/progress.cfg:/usr/dlc/progress.cfg \
            openedge-compiler:${{env.OPENEDGE_VERSION}} \
            /app/src/scripts/build.sh
          ls -l artifacts
          cat artifacts/sports2020.rcode.list
          
  
