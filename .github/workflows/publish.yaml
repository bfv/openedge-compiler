name: Publish image

on:
  workflow_dispatch:
    inputs:
      openedgeversion:
        type: string
        description: "OpenEdge version"
        default: "12.8.7"
        required: true
      targettag:
          type: string
          description: "target tag"
          default: "12.8.7"
          required: true
      targetregistry:
        type: choice
        description: Choose target image registry
        default: "dockerhub-devbfvio"
        required: true
        options:
          - dockerhub-devbfvio
          - flusso-boostermeyer
              
run-name: publish openedge-compiler:${{ inputs.targettag }} to ${{ github.event.inputs.targetregistry }}

jobs:
  publish:

    runs-on: ubuntu-latest

    environment:
        name: ${{ github.event.inputs.targetregistry }}

    steps:
      - name: display info
        run: |
          echo publish openedge-compiler:${{ github.event.inputs.openedgeversion }}
          echo target registry: ${{ github.event.inputs.targetregistry }}
    
      - name: Checkout repository
        uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29  # v4.1.6
        with:
          path: src
  
      - name: Get OpenEdge version
        id: get-oeversion
        uses: bfv/openedge-flatversion@49ecdca1670447fcf715c0b505607ec17dc59b62  # v1.2.1
        with:
          version: ${{ inputs.openedgeversion }}
  
      - name: Version to env
        run: |
          echo "FLATVERSION=${{ steps.get-oeversion.outputs.flat-version }}" >> $GITHUB_ENV
          echo "OPENEDGE_VERSION=${{ inputs.openedgeversion }}" >> $GITHUB_ENV
          echo "OPENEDGE_BASE_VERSION=${{ steps.get-oeversion.outputs.base-version }}" >> $GITHUB_ENV
          echo "IMAGE_NAME=${{ vars.REGISTRY_DOMAIN }}/${{ vars.IMAGE_PREFIX}}openedge-compiler:${{ inputs.targettag }}" >> $GITHUB_ENV

      - name: Insert JDK version in Dockerfile
        run: |
          jdk=`jq -r ".jdk${FLATVERSION}" src/jdk-versions.json`
          echo JDK: $jdk
          sed -i "s/JDKVERSION/$jdk/g" src/Dockerfile
          echo download jdk from Dockerfile:
          cat src/Dockerfile | grep temurin
      
      - name: Download installer files
        run: |
          src/scripts/download-openedge.sh
        
      - name: Get response.ini  # get progress.cfg from secret PROGRESS_CFG_122
        run: |
          echo fetching response.ini/progress.cfg from secret RESPONSE_INI_${{env.FLATVERSION}}
          echo "${{ secrets[format('RESPONSE_INI_{0}', env.FLATVERSION)] }}" > src/response.ini
          echo "${{ secrets[format('PROGRESS_CFG_{0}', env.FLATVERSION)] }}" | base64 --decode > src/progress.cfg
          ls -l src

      # - name: Prepare Dockerfile-dotnet
      #   run: |
      #     oever=$OPENEDGE_VERSION
      #     sed -i "s/OPENEDGEVERSION/$oever/g" src/Dockerfile-dotnet
      #     cat src/Dockerfile-dotnet

      - name: Build plain docker image
        run: |
          cd src
          docker build -t ${{env.IMAGE_NAME}} .
        
      # - name: Build dotnet docker image
      #   run: |
      #     cd src
      #     docker build -t ${{env.IMAGE_NAME}}-dotnet8 -f Dockerfile-dotnet .
  
      - name: Remove installer files
        run: |
          cd src
          rm -f PROGRESS_*
          rm response.ini
          ls -l 
      
      - name: Execute test build
        run: |
          ls -l 
          mkdir artifacts
          chmod ugo=rwx -R ${PWD}/artifacts 
          chmod u=rwx,og=rx -R ${PWD}/src   # don't write to src!
          docker run \
            -v ${PWD}/src/src:/app/src \
            -v ${PWD}/artifacts:/artifacts \
            -v ${PWD}/src/progress.cfg:/usr/dlc/progress.cfg \
            ${{env.IMAGE_NAME}} \
            /app/src/scripts/build.sh
          ls -l artifacts
          cat artifacts/sports2020.rcode.list

      - name: Login to registry
        uses: docker/login-action@0d4c9c5ea7693da7b068278f7b52bda2a190a446  # v3.2.0
        with:
          registry: ${{ vars.REGISTRY_DOMAIN }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      
      - name: Push plain image to registry
        run: |
          docker push ${{env.IMAGE_NAME}}

      - name: Push docker image to registry
        run: |
          docker push ${{env.IMAGE_NAME}}-dotnet8
  