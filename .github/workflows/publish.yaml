name: publish compiler image

on:
  workflow_dispatch:
    inputs:
      openedgeversion:
        type: string
        description: "enter OpenEdge version (x.y.z, f.e. 12.7.0)"
        required: true
            
run-name: publish openedge-compiler:${{ inputs.openedgeversion }} 

jobs:
  publish:

    runs-on: ubuntu-latest

    steps:
      - name: first test
        run: |
          echo publish openedge-compiler:${{ github.event.inputs.openedgeversion }}
    
      - name: Checkout repository
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8         # v3.1.0
        with:
          path: src
  
      - name: Get version info
        run: |
          v=${{ inputs.openedgeversion }}
          flatversion=`echo ${v%\.*} | sed "s/\.//g"`
          echo flattened minor version: $flatversion
          echo "FLATVERSION=${flatversion}" >> $GITHUB_ENV
          echo "OPENEDGE_VERSION=${{ inputs.openedgeversion }}" >> $GITHUB_ENV
          echo "IMAGE_NAME=${{ env.IMAGE_PREFIX}}${{ inputs.openedgeversion }}" >> $GITHUB_ENV

      - name: Download installer files
        run: |
          docker run -v ${PWD}/src:/target devbfvio/oeinstaller:${{env.OPENEDGE_VERSION}}
        
      - name: Get response.ini  # get progress.cfg from secret PROGRESS_CFG_122
        run: |
          echo fetching response.ini/progress.cfg from secret RESPONSE_INI_${{env.FLATVERSION}}
          echo "${{ secrets[format('RESPONSE_INI_{0}', env.FLATVERSION)] }}" > src/response.ini
          echo "${{ secrets[format('PROGRESS_CFG_{0}', env.FLATVERSION)] }}" | base64 --decode > src/progress.cfg
          ls -l src

      - name: Build docker image
        run: |
          cd src
          docker build -t ${{env.IMAGE_NAME}} .

      - name: Remove installer files
        run: |
          cd src
          rm -f PROGRESS_*
          rm response.ini
          ls -l 
      
      - name: Execute test build
        run: |
          ls -l 
          mkdir artifacts
          docker run \
            -v ${PWD}/src/src:/app/src \
            -v ${PWD}/artifacts:/artifacts \
            -v ${PWD}/src/progress.cfg:/usr/dlc/progress.cfg \
            ${{env.IMAGE_NAME}} \
            /app/src/scripts/build.sh
          ls -l artifacts

      
    